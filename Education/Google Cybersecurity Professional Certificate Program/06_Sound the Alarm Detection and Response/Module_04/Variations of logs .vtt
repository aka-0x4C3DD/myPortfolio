WEBVTT

1
00:00:00.140 --> 00:00:02.880
When you purchase
an item in a store,

2
00:00:02.880 --> 00:00:06.165
you usually receive a receipt
as a record of purchase.

3
00:00:06.165 --> 00:00:07.590
The receipt breaks down

4
00:00:07.590 --> 00:00:09.090
the transaction information with

5
00:00:09.090 --> 00:00:11.355
details such as
the date and time,

6
00:00:11.355 --> 00:00:14.205
the cashier's name,
the item name,

7
00:00:14.205 --> 00:00:16.425
cost, and the method of payment.

8
00:00:16.425 --> 00:00:18.855
But, not all store
receipts look the same.

9
00:00:18.855 --> 00:00:22.260
For example, receipts like
automotive invoices use

10
00:00:22.260 --> 00:00:23.730
lots of detail when listing

11
00:00:23.730 --> 00:00:25.995
the items or services
that were sold.

12
00:00:25.995 --> 00:00:27.510
You most likely won't find

13
00:00:27.510 --> 00:00:29.880
this much detail from
a restaurant receipt.

14
00:00:29.880 --> 00:00:32.375
Despite the differences
among store receipts,

15
00:00:32.375 --> 00:00:34.625
all receipts contain
important details

16
00:00:34.625 --> 00:00:36.545
that are relevant
to the transaction.

17
00:00:37.545 --> 00:00:38.345
Logs are similar to receipts.

18
00:00:38.345 --> 00:00:40.175
While receipts record purchases,

19
00:00:40.175 --> 00:00:41.600
logs record the events or

20
00:00:41.600 --> 00:00:44.345
activities that happen
on a network or system.

21
00:00:44.345 --> 00:00:45.995
As a security analyst,

22
00:00:45.995 --> 00:00:48.715
you'll be responsible
for interpreting logs.

23
00:00:49.715 --> 00:00:50.520
Logs come in different formats,

24
00:00:50.520 --> 00:00:52.400
so not all logs look the same.

25
00:00:52.400 --> 00:00:55.400
But, they usually contain
information like timestamps,

26
00:00:55.400 --> 00:00:58.099
system characteristics,
like IP addresses,

27
00:00:58.099 --> 00:01:00.110
and a description of
the event, including

28
00:01:00.110 --> 00:01:03.560
the action taken and who
performed the action.

29
00:01:04.560 --> 00:01:06.350
We know that logs can
be generated from

30
00:01:06.350 --> 00:01:09.289
many different data sources
such as network devices,

31
00:01:09.289 --> 00:01:11.300
operating systems, and more.

32
00:01:11.300 --> 00:01:14.944
These log sources generate
logs in different formats.

33
00:01:14.944 --> 00:01:17.120
Some log formats
are designed to be

34
00:01:17.120 --> 00:01:19.970
human-readable while others
are machine-readable.

35
00:01:19.970 --> 00:01:21.905
Some logs can be verbose,

36
00:01:21.905 --> 00:01:24.335
which means they contain
lots of information,

37
00:01:24.335 --> 00:01:26.210
while some are short and simple.

38
00:01:26.210 --> 00:01:29.365
Let's explore some
commonly used log formats.

39
00:01:30.365 --> 00:01:32.885
One of the most commonly
used log formats is Syslog.

40
00:01:32.885 --> 00:01:36.065
Syslog is both a protocol
and a log format.

41
00:01:36.065 --> 00:01:39.230
As a protocol, it
transports and writes logs.

42
00:01:39.230 --> 00:01:41.555
As a log format, it
contains a header,

43
00:01:41.555 --> 00:01:44.135
followed by structured-data,
and a message.

44
00:01:44.135 --> 00:01:47.525
The Syslog entry includes
three sections: a header,

45
00:01:47.525 --> 00:01:49.840
structured-data,
and a message.

46
00:01:50.840 --> 00:01:53.285
The header contains data
fields like Timestamp,

47
00:01:53.285 --> 00:01:55.850
the Hostname, the
Application name,

48
00:01:55.850 --> 00:01:57.325
and the Message ID.

49
00:01:58.325 --> 00:01:59.570
The structured-data
portion contains

50
00:01:59.570 --> 00:02:02.645
additional data information
in key-value pairs.

51
00:02:02.645 --> 00:02:04.880
Here, the eventSource
is a key that

52
00:02:04.880 --> 00:02:07.070
specifies the data
source of the log,

53
00:02:07.070 --> 00:02:09.470
which is the value Application.

54
00:02:10.470 --> 00:02:12.155
Lastly, the message
component contains

55
00:02:12.155 --> 00:02:14.590
the detailed log message
about the event.

56
00:02:14.590 --> 00:02:18.485
In this example, "This is a
log entry!" is the message.

57
00:02:19.485 --> 00:02:21.140
Let's explore another
common log format you

58
00:02:21.140 --> 00:02:23.755
might encounter as
a security analyst.

59
00:02:23.755 --> 00:02:28.054
JavaScript Object Notation,
more popularly known as JSON,

60
00:02:28.054 --> 00:02:29.510
is a text-based format

61
00:02:29.510 --> 00:02:31.580
designed to be easy
to read and write.

62
00:02:31.580 --> 00:02:35.680
It also uses key-value
pairs to structure data.

63
00:02:36.680 --> 00:02:38.650
Here's an example of a JSON log.

64
00:02:38.650 --> 00:02:40.360
The curly brackets represent

65
00:02:40.360 --> 00:02:42.155
the beginning and
end of an object.

66
00:02:42.155 --> 00:02:43.750
The object is the data that's

67
00:02:43.750 --> 00:02:45.670
enclosed between the brackets.

68
00:02:45.670 --> 00:02:48.355
It's organized using
key-value pairs where

69
00:02:48.355 --> 00:02:51.895
each key has a corresponding
value separated by colons.

70
00:02:51.895 --> 00:02:53.710
For example, for the first line,

71
00:02:53.710 --> 00:02:57.065
the key is Alert and
the value is Malware.

72
00:02:58.065 --> 00:03:01.390
JSON is known for its simplicity
and easy readability.

73
00:03:01.390 --> 00:03:02.935
As a security analyst,

74
00:03:02.935 --> 00:03:06.695
you'll use JSON to read
and write data like logs.

75
00:03:07.695 --> 00:03:09.505
eXtensible Markup
Language, or XML,

76
00:03:09.505 --> 00:03:11.125
is a language and a format

77
00:03:11.125 --> 00:03:13.465
used for storing and
transmitting data.

78
00:03:13.465 --> 00:03:15.235
Instead of key-value pairs,

79
00:03:15.235 --> 00:03:18.425
it uses tags and other
keys to structure data.

80
00:03:19.425 --> 00:03:19.910
Here, we have an example of

81
00:03:19.910 --> 00:03:22.445
an XML log entry
with four fields:

82
00:03:22.445 --> 00:03:24.230
firstName, lastName,

83
00:03:24.230 --> 00:03:26.480
employeeID, and dateJoined,

84
00:03:26.480 --> 00:03:28.715
which are separated with arrows.

85
00:03:29.715 --> 00:03:32.014
Finally, Comma Separated
Values, or CSV,

86
00:03:32.014 --> 00:03:34.340
is a format that
uses separators like

87
00:03:34.340 --> 00:03:36.830
commas to separate data values.

88
00:03:36.830 --> 00:03:38.300
In this example, there are

89
00:03:38.300 --> 00:03:39.710
many different data fields which

90
00:03:39.710 --> 00:03:42.050
are separated with commas.

91
00:03:43.050 --> 00:03:45.515
Now that you know about the
diversity of log formats,

92
00:03:45.515 --> 00:03:47.540
you can focus on evaluating logs

93
00:03:47.540 --> 00:03:49.820
to build context
around a detection.

94
00:03:49.820 --> 00:03:51.455
Coming up, you'll explore how

95
00:03:51.455 --> 00:03:53.840
IDS signatures are
used to detect,

96
00:03:53.840 --> 00:03:57.270
log, and alert on
suspicious activity.