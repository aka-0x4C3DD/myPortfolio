WEBVTT

1
00:00:00.891 --> 00:00:05.460
One of the most powerful features
of SQL is its ability to filter.

2
00:00:05.460 --> 00:00:09.844
In this video, we're going to learn how
this helps us make better queries and

3
00:00:09.844 --> 00:00:12.975
select more specific pieces
of data from a database.

4
00:00:13.975 --> 00:00:16.630
Filtering is selecting data
that match a certain condition.

5
00:00:16.630 --> 00:00:20.575
Think of filtering as a way of
only choosing the data we want.

6
00:00:20.575 --> 00:00:23.895
Let's say we wanted to select
apples from a fruit cart.

7
00:00:23.895 --> 00:00:27.767
Filtering allows us to specify what
kind of apples we want to choose.

8
00:00:27.767 --> 00:00:32.955
When we go buy apples, we might explicitly
say, "Choose only apples that are fresh."

9
00:00:32.955 --> 00:00:36.005
This removes apples that aren't
fresh from the selection.

10
00:00:36.005 --> 00:00:37.595
This is a filter!

11
00:00:37.595 --> 00:00:42.015
As a security analyst, you might filter a
log-in attempts table to find all attempts

12
00:00:42.015 --> 00:00:44.090
from a specific country.

13
00:00:44.090 --> 00:00:47.810
This could be done by applying
a filter on the country column.

14
00:00:47.810 --> 00:00:53.000
For example, you could filter to just
return records containing Canada.

15
00:00:54.000 --> 00:00:58.820
Before we get started, we need to focus on an
important part of the syntax of SQL.

16
00:00:58.820 --> 00:01:00.760
Let's learn about operators.

17
00:01:00.760 --> 00:01:05.250
An operator is a symbol or
keyword that represents an operation.

18
00:01:05.250 --> 00:01:09.360
An example of an operator would
be the equal to operator.

19
00:01:09.360 --> 00:01:13.000
For example,
if we wanted to find all records that

20
00:01:13.000 --> 00:01:18.881
have USA in the country
column, we use country = 'USA'

21
00:01:18.881 --> 00:01:23.800
To filter a query in SQL, we simply
add an extra line to the SELECT and FROM

22
00:01:23.800 --> 00:01:26.000
statement we used before.

23
00:01:26.100 --> 00:01:30.270
This extra line will use
a WHERE clause.

24
00:01:30.270 --> 00:01:33.715
In SQL, WHERE indicates the condition for a filter.

25
00:01:33.715 --> 00:01:39.630
After the keyword WHERE, the specific
condition is listed using operators.

26
00:01:39.630 --> 00:01:44.342
So if we wanted to find all of the login
attempts made in the United States,

27
00:01:44.342 --> 00:01:46.243
we would create this filter.

28
00:01:46.243 --> 00:01:51.190
In this particular condition, we're
indicating to return all records that

29
00:01:51.190 --> 00:01:55.600
have a value in the country
column that is equal to USA.

30
00:01:56.600 --> 00:01:59.000
Let's try putting it
all together in SQL.

31
00:01:59.000 --> 00:02:02.800
We're going to start with
selecting all the columns from the

32
00:02:02.800 --> 00:02:09.680
log_in_attempts table. And
then add the WHERE filter.

33
00:02:09.680 --> 00:02:11.900
Don't forget the semicolon!

34
00:02:11.900 --> 00:02:15.060
This tells us we finished
the SQL statement.

35
00:02:15.060 --> 00:02:20.299
Now, let's run this query!
Because of our filter, only the rows

36
00:02:20.299 --> 00:02:26.180
where the country of the log-in
attempt was USA are returned.

37
00:02:27.180 --> 00:02:31.110
In the previous example, the condition for
our filter was based simply on returning

38
00:02:31.110 --> 00:02:33.970
records that are equal
to a particular value.

39
00:02:33.970 --> 00:02:37.656
We can also make our conditions
more complex by searching for

40
00:02:37.656 --> 00:02:40.710
a pattern instead of an exact word.

41
00:02:40.710 --> 00:02:45.120
For example, in the employees table,
we have a column for office.

42
00:02:45.120 --> 00:02:49.370
We could search for records in this
column that match a certain pattern.

43
00:02:49.370 --> 00:02:52.826
Perhaps we might want all
offices in the East building.

44
00:02:52.826 --> 00:02:57.567
To search for a pattern, we used the
percentage sign to act as a wildcard for

45
00:02:57.567 --> 00:02:59.380
unspecified characters.

46
00:02:59.380 --> 00:03:06.359
If we ran a filter for 'East%', this would
return all records that start with East --

47
00:03:06.359 --> 00:03:13.920
for example, the offices East-120,
East-290, and East-435.

48
00:03:14.920 --> 00:03:17.426
When searching for
patterns with the percentage sign,

49
00:03:17.426 --> 00:03:20.160
we cannot use the equals operator.

50
00:03:20.160 --> 00:03:23.683
Instead, we use another operator, LIKE.

51
00:03:23.683 --> 00:03:29.671
LIKE is an operator used with WHERE to
search for a pattern in a column.

52
00:03:30.710 --> 00:03:34.630
Since LIKE is an operator,
similar to the equal sign,

53
00:03:34.630 --> 00:03:37.460
we use it instead of the equal sign.

54
00:03:37.460 --> 00:03:42.449
So, when our goal is to return all values
in the office column that start with the word

55
00:03:42.449 --> 00:03:45.880
East, LIKE would
appear in a WHERE clause.

56
00:03:46.880 --> 00:03:49.612
Let's go back to the example in
which we wanted to filter for

57
00:03:49.612 --> 00:03:53.200
log-in attempts made in the United States.

58
00:03:53.200 --> 00:03:57.794
Imagine that we realize that our database
contains inconsistencies with how

59
00:03:57.794 --> 00:04:00.070
the United States is represented.

60
00:04:00.070 --> 00:04:05.570
Some entries use US while others use USA.

61
00:04:05.570 --> 00:04:09.747
Let's get into SQL and
apply this new type of filter with LIKE.

62
00:04:09.747 --> 00:04:13.079
We're going to start with
the same first two lines of

63
00:04:13.079 --> 00:04:17.785
code because we want to select all
columns from the log-in attempts table.

64
00:04:17.785 --> 00:04:22.574
And we're going to add a filter with
LIKE so that records will be returned if

65
00:04:22.574 --> 00:04:27.620
they contain a value in the country
column beginning with the characters US.

66
00:04:27.620 --> 00:04:31.803
This includes both US and USA.

67
00:04:31.803 --> 00:04:36.907
Let's run this query to check if
the output changes. This returns all

68
00:04:36.907 --> 00:04:42.713
the entries where the user location
was in the United States.

69
00:04:42.713 --> 00:04:48.200
And now we can use the LIKE clause to
filter columns based on a pattern!

70
00:04:49.200 --> 00:04:53.360
Wow, we've already learned how to get
very precise with our database and

71
00:04:53.360 --> 00:04:57.061
get exactly the data we
need with one single query.

72
00:04:57.061 --> 00:04:58.627
I'm excited for what's next!