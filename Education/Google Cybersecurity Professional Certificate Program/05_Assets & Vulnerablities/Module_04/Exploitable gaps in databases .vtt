WEBVTT

1
00:00:01.170 --> 00:00:03.425
Let's keep exploring injection and

2
00:00:03.425 --> 00:00:07.357
attacks by investigating another
common type of web based exploit.

3
00:00:07.357 --> 00:00:11.579
The next one we're going to discuss
exploits the way websites access

4
00:00:11.579 --> 00:00:14.260
information from databases.

5
00:00:14.260 --> 00:00:17.877
Early in the program,
you may have learned about SQL.

6
00:00:17.877 --> 00:00:21.982
You may recall, SQL is a programming
language used to create,

7
00:00:21.982 --> 00:00:25.861
interact with, and
request information from a database.

8
00:00:27.450 --> 00:00:34.510
SQL is used by most web applications. For
example, shopping websites use it a lot.

9
00:00:34.510 --> 00:00:37.947
Imagine the databases of
an online clothing store

10
00:00:37.947 --> 00:00:42.644
It likely contains a full inventory
of all the items the company sells.

11
00:00:42.644 --> 00:00:47.035
Websites don't normally make users
enter the SQL queries manually.

12
00:00:47.035 --> 00:00:50.213
Instead, they use things like menus,
images, and

13
00:00:50.213 --> 00:00:54.370
buttons to show users
information in a meaningful way.

14
00:00:54.370 --> 00:00:59.760
For example, when an online shopper clicks
a button to add a sweater to their cart,

15
00:00:59.760 --> 00:01:05.001
it triggers a SQL query. The query runs in
the background where no one can see it.

16
00:01:06.330 --> 00:01:10.158
You'd never know from using the menus and
buttons of a website, but

17
00:01:10.158 --> 00:01:14.131
sometimes those backend queries
are vulnerable to injection attacks.

18
00:01:15.490 --> 00:01:20.756
A SQL injection is an attack that
executes unexpected queries on a database.

19
00:01:20.756 --> 00:01:26.430
Like cross-site scripting, SQL injection
occurs due to a lack of sanitized input.

20
00:01:26.430 --> 00:01:31.479
The injections take place in the area
of the website that are designed to

21
00:01:31.479 --> 00:01:36.550
accept user input. A common example
is the login form to access a site.

22
00:01:36.550 --> 00:01:40.225
One of these forms might trigger
a backend SQL statement

23
00:01:40.225 --> 00:01:43.460
like this
when a user enters their credentials.

24
00:01:43.460 --> 00:01:48.298
Web forms, like this one, are designed
to copy user input into the statement

25
00:01:48.298 --> 00:01:50.371
exactly as they're written.

26
00:01:51.500 --> 00:01:55.585
The statement then sends a request
to the server, which runs the query.

27
00:01:55.585 --> 00:01:59.986
Websites that are vulnerable to SQL
injection insert the user's input exactly

28
00:01:59.986 --> 00:02:02.431
as it's entered before running the code.

29
00:02:03.580 --> 00:02:07.150
Unfortunately, this is
a serious design flaw.

30
00:02:07.150 --> 00:02:11.658
It commonly happens because web developers
expect people to use these inputs

31
00:02:11.658 --> 00:02:13.240
correctly.

32
00:02:13.240 --> 00:02:17.562
They don't anticipate attackers
exploiting them. For example,

33
00:02:17.562 --> 00:02:20.620
an attacker might insert
additional SQL code.

34
00:02:20.620 --> 00:02:25.202
This could cause the server to run
a harmful query of code that it wasn't

35
00:02:25.202 --> 00:02:26.075
expecting.

36
00:02:26.075 --> 00:02:31.645
Malicious hackers can target these attack
vectors to obtain sensitive information,

37
00:02:31.645 --> 00:02:36.311
modify tables and even gain
administrative rights to the database.

38
00:02:37.560 --> 00:02:42.364
The best way to defend against SQL
injection is code that will sanitize

39
00:02:42.364 --> 00:02:43.173
the input.

40
00:02:43.173 --> 00:02:47.623
Developers can write code to search for
specific SQL characters.

41
00:02:47.623 --> 00:02:51.770
This gives the server a clearer
idea of what inputs to expect.

42
00:02:51.770 --> 00:02:54.881
One way this is done is
with prepared statements.

43
00:02:56.020 --> 00:02:59.726
A prepared statement is a coding
technique that executes

44
00:02:59.726 --> 00:03:03.365
SQL statements before passing
them on to the database.

45
00:03:03.365 --> 00:03:05.449
When the user's input is unknown,

46
00:03:05.449 --> 00:03:09.086
the best practice is to use
these prepared statements.

47
00:03:09.086 --> 00:03:11.319
With just a few extra lines of code,

48
00:03:11.319 --> 00:03:16.010
a prepared statement executes the code
before passing it on to the server.

49
00:03:16.010 --> 00:03:20.191
This means the code can be validated
before performing the query.

50
00:03:21.530 --> 00:03:25.331
Having well written code is one of
the keys to preventing SQL injection.

51
00:03:26.380 --> 00:03:30.464
Security teams work with program
developers to test applications for

52
00:03:30.464 --> 00:03:32.409
these sort of vulnerabilities.

53
00:03:32.409 --> 00:03:35.393
Like a lot of security tasks,
it's a team effort.

54
00:03:35.393 --> 00:03:40.241
Injection attacks are just one of many
types of web-based exploits that security

55
00:03:40.241 --> 00:03:41.310
teams deal with.

56
00:03:41.310 --> 00:03:45.433
We're going to explore how security
teams prepare for injection attacks and

57
00:03:45.433 --> 00:03:46.817
other kinds of threats.