WEBVTT

1
00:00:01.120 --> 00:00:04.300
Previously, we explored
a few types of malware.

2
00:00:04.320 --> 00:00:06.220
Whether it's installed on an individual

3
00:00:06.250 --> 00:00:09.980
computer or a network server,
all malicious software needs to be

4
00:00:10.010 --> 00:00:12.380
delivered to the target
before it can work.

5
00:00:12.410 --> 00:00:14.580
Phishing and other social engineering

6
00:00:14.610 --> 00:00:18.060
techniques are common ways
for malware to be delivered.

7
00:00:18.080 --> 00:00:20.460
Another way it's spread is using a broad

8
00:00:20.490 --> 00:00:23.780
class of threats known
as web based exploits.

9
00:00:24.810 --> 00:00:27.900
Web-based exploits are malicious code or behavior that's

10
00:00:27.900 --> 00:00:31.820
used to take advantage of coding
flaws in a web application.

11
00:00:31.850 --> 00:00:37.460
Cybercriminals target web-based exploits
to obtain sensitive personal information.

12
00:00:37.490 --> 00:00:40.140
Attacks occur because web applications

13
00:00:40.170 --> 00:00:43.580
interact with multiple users
across multiple networks.

14
00:00:43.610 --> 00:00:46.040
Malicious hackers commonly exploit this

15
00:00:46.070 --> 00:00:49.500
high level of interaction
using injection attacks.

16
00:00:50.500 --> 00:00:55.060
An injection attack is malicious code
inserted into a vulnerable application.

17
00:00:55.090 --> 00:00:58.700
The infected application often
appears to work normally.

18
00:00:58.730 --> 00:01:02.980
That's because the injected code runs
in the background, unknown to the user.

19
00:01:03.000 --> 00:01:04.930
Applications are vulnerable to injection

20
00:01:04.960 --> 00:01:08.660
attacks because they are
programmed to receive data inputs.

21
00:01:08.690 --> 00:01:10.820
This could be something the user types,

22
00:01:10.850 --> 00:01:14.460
clicks, or something one program
is sharing with another.

23
00:01:14.490 --> 00:01:16.050
When coded correctly,

24
00:01:16.080 --> 00:01:18.700
applications should be able
to interpret and handle user inputs.

25
00:01:19.930 --> 00:01:22.380
For example, let's say an application is

26
00:01:22.410 --> 00:01:25.210
expecting the user
to enter a phone number.

27
00:01:25.240 --> 00:01:27.380
This application should validate the input

28
00:01:27.410 --> 00:01:31.900
from the user to make sure the data is
all numbers and not more than ten digits.

29
00:01:31.930 --> 00:01:34.360
If the input from the user doesn't meet

30
00:01:34.390 --> 00:01:38.180
these requirements, the application
should know how to handle it.

31
00:01:38.210 --> 00:01:42.380
Web apps interact with multiple
users across many platforms.

32
00:01:42.410 --> 00:01:46.850
They also have a lot of interactive
objects like images and buttons.

33
00:01:46.880 --> 00:01:48.900
This makes it challenging for developers

34
00:01:48.930 --> 00:01:51.700
to think of all the ways they
should sanitize their input.

35
00:01:52.700 --> 00:01:54.700
A common and dangerous type of injection

36
00:01:54.730 --> 00:01:59.020
attack that's a threat to web
apps is cross-site scripting.

37
00:01:59.050 --> 00:02:04.380
Cross site scripting, or XSS,
is an injection attack that inserts code

38
00:02:04.410 --> 00:02:07.490
into a vulnerable website
or web application.

39
00:02:07.520 --> 00:02:09.380
These attacks are often delivered

40
00:02:09.410 --> 00:02:15.500
by exploiting the two languages used
by most websites, HTML and JavaScript.

41
00:02:15.530 --> 00:02:17.730
Both can give cybercriminals access

42
00:02:17.760 --> 00:02:20.660
to everything that loads
on the infected web page.

43
00:02:20.690 --> 00:02:22.700
This can include session cookies,

44
00:02:22.730 --> 00:02:25.800
geolocation, and even
webcams and microphones.

45
00:02:26.800 --> 00:02:29.730
There are three main types of cross-site
scripting attacks

46
00:02:29.760 --> 00:02:33.200
reflected, stored, and DOM-based.

47
00:02:34.200 --> 00:02:38.500
A reflected XSS attack is an instance
where a malicious script is sent

48
00:02:38.530 --> 00:02:42.610
to the server and activated
during the server's response.

49
00:02:42.640 --> 00:02:46.220
A common example of this is
the search bar of a website.

50
00:02:46.250 --> 00:02:48.820
In a reflected XSS attack,

51
00:02:48.850 --> 00:02:53.540
criminals send their target a web link
that appears to go to a trusted site.

52
00:02:53.570 --> 00:02:59.260
When they click the link, it sends a HTTP
request to the vulnerable site server.

53
00:02:59.290 --> 00:03:01.900
The attacker script is then returned or

54
00:03:01.930 --> 00:03:05.300
reflected back to the
innocent user's browser.

55
00:03:05.330 --> 00:03:07.180
Here, the browser loads the malicious

56
00:03:07.210 --> 00:03:10.220
script because it trusts
the server's response.

57
00:03:10.250 --> 00:03:11.780
With the script loaded,

58
00:03:11.810 --> 00:03:15.000
information like session cookies
are sent back to the attacker.

59
00:03:16.000 --> 00:03:17.820
In a stored XSS attack,

60
00:03:17.850 --> 00:03:22.180
the malicious script isn't hidden in a
link that needs to be sent to the server.

61
00:03:22.210 --> 00:03:25.860
Instead a stored XSS attack is an instance

62
00:03:25.890 --> 00:03:30.340
when malicious script is
injected directly on the server.

63
00:03:30.370 --> 00:03:34.740
Here, attackers target elements
of a site that are served to the user.

64
00:03:34.770 --> 00:03:36.460
This could be things like images

65
00:03:36.490 --> 00:03:39.460
and buttons that load
when the site is visited.

66
00:03:39.490 --> 00:03:44.940
Infected elements activate the malicious
code when a user simply visits the site.

67
00:03:44.970 --> 00:03:47.900
Stored XSS attacks can be damaging because

68
00:03:47.930 --> 00:03:50.800
the user has no way of knowing
the site is infected beforehand.

69
00:03:51.800 --> 00:03:56.740
Finally there's DOM-based XSS. DOM stands

70
00:03:56.770 --> 00:04:02.220
for Document Object Model, which is
basically the source code of a website.

71
00:04:02.250 --> 00:04:06.060
A DOM-based XSS attack is an instance

72
00:04:06.090 --> 00:04:08.660
when malicious script
exists in the web page

73
00:04:08.690 --> 00:04:12.540
a browser loads. Unlike reflected XSS,

74
00:04:12.570 --> 00:04:15.600
these attacks don't need to be
sent to the server to activate.

75
00:04:16.600 --> 00:04:22.380
In a DOM-based attack, a malicious
script can be seen in the URL.

76
00:04:22.410 --> 00:04:27.500
In this example, the website's
URL contains parameter values.

77
00:04:27.530 --> 00:04:31.180
The parameter values reflect
input from the user.

78
00:04:31.210 --> 00:04:35.020
Here, the site allows users
to select color themes.

79
00:04:35.040 --> 00:04:39.420
When the user makes a selection,
it appears as part of the URL.

80
00:04:39.450 --> 00:04:45.220
In a DOM-based attack, criminals change
the parameter that's expecting an input.

81
00:04:45.250 --> 00:04:50.220
For example, they could hide malicious
JavaScript in the HTML tags.

82
00:04:50.250 --> 00:04:54.000
The browser would process the HTML
and execute the JavaScript.

83
00:04:55.000 --> 00:05:00.020
Hackers use these methods of cross-site
scripting to steal sensitive information.

84
00:05:00.040 --> 00:05:04.060
Security analysts should be familiar
with this group of injection attacks.

85
00:05:04.090 --> 00:05:08.560
However, they're not the only ones,
as we'll discover next time.