WEBVTT

1
00:00:00.380 --> 00:00:05.070
Now that you know how to
import text files into Python,

2
00:00:05.070 --> 00:00:07.380
we're going to
take this one step

3
00:00:07.380 --> 00:00:11.144
further and learn how to
give them a structure.

4
00:00:11.144 --> 00:00:15.300
This will allow us to
analyze them more easily.

5
00:00:15.300 --> 00:00:19.455
This process is often
referred to as parsing.

6
00:00:19.455 --> 00:00:22.005
Parsing is the process of

7
00:00:22.005 --> 00:00:25.635
converting data into a
more readable format.

8
00:00:25.635 --> 00:00:27.960
To do this, we're going to

9
00:00:27.960 --> 00:00:30.120
put together everything
we learned about

10
00:00:30.120 --> 00:00:32.750
lists and strings and learn

11
00:00:32.750 --> 00:00:36.125
another method for working
with strings in Python.

12
00:00:37.125 --> 00:00:39.665
The method we need
is the split method.

13
00:00:39.665 --> 00:00:44.255
The split method converts
a string into a list.

14
00:00:44.255 --> 00:00:46.670
It does this by separating

15
00:00:46.670 --> 00:00:49.490
the string based on a
specified character.

16
00:00:49.490 --> 00:00:52.385
Or, if no argument is passed,

17
00:00:52.385 --> 00:00:55.220
every time it encounters
a whitespace,

18
00:00:55.220 --> 00:00:57.275
it separates the string.

19
00:00:57.275 --> 00:00:59.825
So, a split would
convert the string

20
00:00:59.825 --> 00:01:04.670
"We are learning about
parsing!" into this list.

21
00:01:05.670 --> 00:01:07.280
We are using the split method

22
00:01:07.280 --> 00:01:08.975
to separate the strings into

23
00:01:08.975 --> 00:01:11.465
smaller chunks that
we can analyze more

24
00:01:11.465 --> 00:01:14.840
easily than one
big block of text.

25
00:01:14.840 --> 00:01:18.440
In this video, we'll
work with an example of

26
00:01:18.440 --> 00:01:20.135
a security log where

27
00:01:20.135 --> 00:01:23.525
every line represents
a new data point.

28
00:01:23.525 --> 00:01:26.150
To store these points in a list,

29
00:01:26.150 --> 00:01:30.200
we want to separate the
text based on the new line.

30
00:01:30.200 --> 00:01:35.510
Python considers a new line
to be a type of whitespace.

31
00:01:35.510 --> 00:01:40.040
We can use the split method
without passing an argument.

32
00:01:41.040 --> 00:01:43.205
We'll start with our code
from the previous video.

33
00:01:43.205 --> 00:01:45.080
Remember, we used
this code to open

34
00:01:45.080 --> 00:01:48.560
a file and then read
it into a string.

35
00:01:48.560 --> 00:01:52.130
Now, let's split
that string into

36
00:01:52.130 --> 00:01:56.515
a list using the split method
and then print the output.

37
00:01:56.515 --> 00:01:58.530
After we run it,

38
00:01:58.530 --> 00:02:00.530
Python outputs a list of

39
00:02:00.530 --> 00:02:04.265
usernames instead of
one big string of them.

40
00:02:04.265 --> 00:02:07.070
If we want to save this list,

41
00:02:07.070 --> 00:02:09.950
we would need to assign
it to another variable.

42
00:02:09.950 --> 00:02:13.910
For example, we can call
the variable usernames.

43
00:02:13.910 --> 00:02:16.480
And then we'll run it again.

44
00:02:16.480 --> 00:02:20.435
And now this list can be
reused in other code.

45
00:02:21.435 --> 00:02:22.715
Congratulations!

46
00:02:22.715 --> 00:02:24.590
You just learned the basics of

47
00:02:24.590 --> 00:02:26.660
parsing a text file in Python.

48
00:02:26.660 --> 00:02:29.824
In the next videos, we're
going to be exploring

49
00:02:29.824 --> 00:02:31.580
techniques that help us

50
00:02:31.580 --> 00:02:35.010
work more in depth
with data in Python.