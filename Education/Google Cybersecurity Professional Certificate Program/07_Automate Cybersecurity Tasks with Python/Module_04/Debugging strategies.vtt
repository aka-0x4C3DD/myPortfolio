WEBVTT

1
00:00:00.110 --> 00:00:02.640
As a security analyst,

2
00:00:02.640 --> 00:00:06.000
you might be required
to read or write code.

3
00:00:06.000 --> 00:00:08.640
One of the biggest challenges is

4
00:00:08.640 --> 00:00:11.025
getting it to run and
function properly.

5
00:00:11.025 --> 00:00:14.010
In fact, fixing
complex errors in

6
00:00:14.010 --> 00:00:17.070
code can sometimes
take up just as much,

7
00:00:17.070 --> 00:00:19.665
if not more, time than
writing your code.

8
00:00:19.665 --> 00:00:23.415
This is why it's important
to develop this skill.

9
00:00:23.415 --> 00:00:26.820
Now that you've learned the
basics of coding in Python,

10
00:00:26.820 --> 00:00:30.105
it's important to learn
how to deal with errors.

11
00:00:30.105 --> 00:00:33.960
For that reason, we'll focus
on debugging your code.

12
00:00:33.960 --> 00:00:36.510
Debugging is the practice of

13
00:00:36.510 --> 00:00:39.310
identifying and fixing
errors in code.

14
00:00:39.310 --> 00:00:43.055
In this video, we'll explore
some techniques for this.

15
00:00:44.055 --> 00:00:45.320
There are three types of errors:

16
00:00:45.320 --> 00:00:50.760
syntax errors, logic
errors, and exceptions.

17
00:00:50.760 --> 00:00:55.115
Syntax errors involve
invalid usage

18
00:00:55.115 --> 00:00:56.720
of the Python language,

19
00:00:56.720 --> 00:00:58.700
such as forgetting to

20
00:00:58.700 --> 00:01:01.220
add a colon after
a function header.

21
00:01:01.220 --> 00:01:03.680
Let's explore this
type of error.

22
00:01:03.680 --> 00:01:05.270
When we run this code,

23
00:01:05.270 --> 00:01:09.350
we get a message that indicates
there's a syntax error.

24
00:01:09.350 --> 00:01:11.810
Depending on the
Python environment,

25
00:01:11.810 --> 00:01:15.109
it may also display
additional details.

26
00:01:15.109 --> 00:01:18.050
We'll typically get
information about

27
00:01:18.050 --> 00:01:21.230
the error, like its location.

28
00:01:21.230 --> 00:01:25.235
These syntax errors
are often easy to fix

29
00:01:25.235 --> 00:01:29.170
since you can find exactly
where the error happened.

30
00:01:29.170 --> 00:01:31.445
They are similar to correcting

31
00:01:31.445 --> 00:01:34.255
simple grammar
mistakes in an email.

32
00:01:34.255 --> 00:01:37.880
Since the error message tells
us the problem is on

33
00:01:37.880 --> 00:01:41.420
the line that defines the
function, let's go there.

34
00:01:41.420 --> 00:01:43.880
In this case, we can add

35
00:01:43.880 --> 00:01:47.700
a colon to the header
and resolve our error.

36
00:01:48.230 --> 00:01:50.540
When we run it again,

37
00:01:50.540 --> 00:01:53.165
there's no longer
an error message.

38
00:01:53.165 --> 00:01:57.110
This is just one example
of a syntax error.

39
00:01:57.110 --> 00:01:59.960
Other examples include omitting

40
00:01:59.960 --> 00:02:02.120
a parenthesis after a function,

41
00:02:02.120 --> 00:02:04.505
misspelling a Python keyword,

42
00:02:04.505 --> 00:02:08.525
or not properly closing
quotation marks for a string.

43
00:02:09.525 --> 00:02:12.440
Next, let's focus
on logic errors.

44
00:02:12.440 --> 00:02:16.565
Logic errors may not
cause error messages;

45
00:02:16.565 --> 00:02:20.360
instead, they produce
unintended results.

46
00:02:20.360 --> 00:02:23.420
A logic error could be
as simple as writing

47
00:02:23.420 --> 00:02:27.285
the incorrect text within
a print statement, or

48
00:02:27.285 --> 00:02:30.380
it might involve
something like writing

49
00:02:30.380 --> 00:02:32.330
a less than symbol instead

50
00:02:32.330 --> 00:02:35.500
of less than or equal to symbol.

51
00:02:35.500 --> 00:02:38.450
This change in
operator would exclude

52
00:02:38.450 --> 00:02:41.600
a value that was needed for
the code to work as intended.

53
00:02:41.600 --> 00:02:43.610
For example, imagine

54
00:02:43.610 --> 00:02:46.790
that you reach out to
a response team when

55
00:02:46.790 --> 00:02:49.340
the priority level of
an issue is less than

56
00:02:49.340 --> 00:02:52.835
three instead of less
than or equal to three.

57
00:02:52.835 --> 00:02:56.450
This means all
events classified as

58
00:02:56.450 --> 00:03:01.265
priority level 3 could go
unnoticed and unresolved.

59
00:03:02.265 --> 00:03:04.850
To diagnose a logic error
that's difficult to find,

60
00:03:04.850 --> 00:03:08.900
one strategy is to
use print statements.

61
00:03:08.900 --> 00:03:10.370
You'll need to insert

62
00:03:10.370 --> 00:03:12.845
print statements
throughout your code.

63
00:03:12.845 --> 00:03:15.170
The print statements should

64
00:03:15.170 --> 00:03:17.075
describe the location
in the code;

65
00:03:17.075 --> 00:03:19.820
for example, "print line 20"

66
00:03:19.820 --> 00:03:24.270
or "print line 55: inside
the conditional".

67
00:03:24.270 --> 00:03:28.120
The idea is to use these
print statements to

68
00:03:28.120 --> 00:03:30.340
identify which sections of

69
00:03:30.340 --> 00:03:32.710
the code are
functioning properly.

70
00:03:32.710 --> 00:03:34.495
When a print statement

71
00:03:34.495 --> 00:03:36.740
doesn't print as expected,

72
00:03:36.740 --> 00:03:38.709
this helps you identify

73
00:03:38.709 --> 00:03:40.975
sections of the
code with problems.

74
00:03:41.975 --> 00:03:43.120
Another option for identifying

75
00:03:43.120 --> 00:03:45.835
logic errors is to
use a debugger.

76
00:03:45.835 --> 00:03:47.860
A debugger will let you

77
00:03:47.860 --> 00:03:50.480
insert breakpoints
into your code.

78
00:03:50.480 --> 00:03:53.890
Breakpoints allow you to
segment your code into

79
00:03:53.890 --> 00:03:57.875
sections and run just
one portion at a time.

80
00:03:57.875 --> 00:04:00.585
Just like with the
print statements,

81
00:04:00.585 --> 00:04:03.130
running these sections
independently

82
00:04:03.130 --> 00:04:06.560
can help isolate
problems in the code.

83
00:04:07.650 --> 00:04:11.585
Let's move on to our last
type of error: an exception.

84
00:04:11.585 --> 00:04:15.710
Exceptions happen when the
program doesn't know how to

85
00:04:15.710 --> 00:04:17.810
execute code even though

86
00:04:17.810 --> 00:04:20.240
there are no problems
with the syntax.

87
00:04:20.240 --> 00:04:24.695
Exceptions occur for a variety
of reasons. For example,

88
00:04:24.695 --> 00:04:27.470
they can happen when
something is mathematically

89
00:04:27.470 --> 00:04:29.990
impossible, like asking the code

90
00:04:29.990 --> 00:04:32.075
to divide something by 0.

91
00:04:32.075 --> 00:04:35.060
Exceptions might
also happen when you

92
00:04:35.060 --> 00:04:37.820
ask Python to access
index values that don't

93
00:04:37.820 --> 00:04:40.430
exist or when Python

94
00:04:40.430 --> 00:04:44.045
doesn't recognize variable
or function names.

95
00:04:44.045 --> 00:04:46.790
Exceptions also may occur

96
00:04:46.790 --> 00:04:48.785
when you use an
incorrect data type.

97
00:04:48.785 --> 00:04:51.155
Let's demonstrate an exception.

98
00:04:52.155 --> 00:04:54.065
Let's say you have
a variable called

99
00:04:54.065 --> 00:04:56.990
my_string that contains
the word "security".

100
00:04:56.990 --> 00:05:00.289
Since this string
has 8 characters,

101
00:05:00.289 --> 00:05:04.445
we can successfully print
any index less than 8.

102
00:05:04.445 --> 00:05:08.280
Index 0 contains "s."

103
00:05:13.270 --> 00:05:17.310
Index 1 contains "e."

104
00:05:17.860 --> 00:05:22.110
And index 2 contains "c."

105
00:05:24.230 --> 00:05:28.130
But, if you try to
access the character

106
00:05:28.130 --> 00:05:31.745
at index 100, you'll
get an error.

107
00:05:31.745 --> 00:05:35.350
Let's run this and
explore what happens.

108
00:05:35.350 --> 00:05:39.850
After it successfully prints
the first three statements,

109
00:05:39.850 --> 00:05:42.100
we get an error message:

110
00:05:42.100 --> 00:05:45.005
"string index out of range."

111
00:05:45.005 --> 00:05:46.920
For exception errors,

112
00:05:46.920 --> 00:05:49.690
you can also make
use of debuggers and

113
00:05:49.690 --> 00:05:51.430
print statements to figure

114
00:05:51.430 --> 00:05:54.190
out the potential
source of error.

115
00:05:55.190 --> 00:05:56.650
Errors and exceptions can

116
00:05:56.650 --> 00:05:59.155
be expected when
working in Python.

117
00:05:59.155 --> 00:06:03.415
The important thing is to
know how to deal with them.

118
00:06:03.415 --> 00:06:05.740
Hopefully, this video provided

119
00:06:05.740 --> 00:06:09.020
some valuable insight
about debugging code.

120
00:06:09.020 --> 00:06:11.200
This will help
ensure that the code

121
00:06:11.200 --> 00:06:13.790
that you write is functional.