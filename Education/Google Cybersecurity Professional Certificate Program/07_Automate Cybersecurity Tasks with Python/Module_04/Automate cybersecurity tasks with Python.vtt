WEBVTT

1
00:00:00.020 --> 00:00:04.620
Automation is a key concern
in the security profession.

2
00:00:04.620 --> 00:00:07.290
For example, it would
be difficult to

3
00:00:07.290 --> 00:00:11.280
monitor each individual
attempt to access the system.

4
00:00:11.280 --> 00:00:14.520
For this reason, it's
helpful to automate

5
00:00:14.520 --> 00:00:16.710
the security controls
put in place to keep

6
00:00:16.710 --> 00:00:19.695
malicious actors
out of the system.

7
00:00:19.695 --> 00:00:22.050
And it's also helpful to automate

8
00:00:22.050 --> 00:00:24.255
the detection of
unusual activity.

9
00:00:24.255 --> 00:00:26.745
Python is great for automation.

10
00:00:26.745 --> 00:00:30.645
Let's explore three
specific examples of this.

11
00:00:31.645 --> 00:00:34.230
First, imagine you're
a security analyst for

12
00:00:34.230 --> 00:00:36.330
a health care
company that stores

13
00:00:36.330 --> 00:00:39.930
confidential patient records
in a database server.

14
00:00:39.930 --> 00:00:41.975
Your company wants to implement

15
00:00:41.975 --> 00:00:45.185
additional controls to
protect this information.

16
00:00:45.185 --> 00:00:48.680
In order to enhance the
security of the records,

17
00:00:48.680 --> 00:00:52.730
you decide to implement a
timeout policy that locks out

18
00:00:52.730 --> 00:00:54.470
a user if they spent

19
00:00:54.470 --> 00:00:57.815
more than three minutes
logging into the database.

20
00:00:57.815 --> 00:01:00.575
This is because
it's possible that

21
00:01:00.575 --> 00:01:03.065
if a user is spending
too much time,

22
00:01:03.065 --> 00:01:06.200
it could be that they are
guessing the password.

23
00:01:06.200 --> 00:01:08.315
To do this, you can use

24
00:01:08.315 --> 00:01:10.930
Python to identify when
a user has entered

25
00:01:10.930 --> 00:01:13.010
a username and start tracking

26
00:01:13.010 --> 00:01:16.990
the time until this user
enters the correct password.

27
00:01:17.990 --> 00:01:20.130
Now, let's cover a
different example.

28
00:01:20.130 --> 00:01:22.730
This time, imagine you are

29
00:01:22.730 --> 00:01:25.540
a security analyst
working at a law firm.

30
00:01:25.540 --> 00:01:27.200
There have recently been

31
00:01:27.200 --> 00:01:30.035
some ongoing security
attacks where

32
00:01:30.035 --> 00:01:31.550
threat actors hack into

33
00:01:31.550 --> 00:01:33.410
employee accounts and attempt

34
00:01:33.410 --> 00:01:35.915
to steal client information.

35
00:01:35.915 --> 00:01:39.545
They then threaten to
use this maliciously.

36
00:01:39.545 --> 00:01:43.055
So the security team
is working to target

37
00:01:43.055 --> 00:01:45.890
all security
vulnerabilities that allow

38
00:01:45.890 --> 00:01:49.280
these attackers to break into
the company's databases.

39
00:01:49.280 --> 00:01:52.640
You personally are
responsible for

40
00:01:52.640 --> 00:01:54.874
tracking all user logins

41
00:01:54.874 --> 00:01:57.305
by checking their
login timestamp,

42
00:01:57.305 --> 00:02:00.595
IP address, and
location of login.

43
00:02:00.595 --> 00:02:02.960
For example, if a user

44
00:02:02.960 --> 00:02:05.975
logs in during the early
hours of the morning,

45
00:02:05.975 --> 00:02:07.590
they should be flagged.

46
00:02:07.590 --> 00:02:10.460
Also, if they are
logging in from

47
00:02:10.460 --> 00:02:12.230
a location that's not one

48
00:02:12.230 --> 00:02:14.255
of the two established
work zones,

49
00:02:14.255 --> 00:02:16.220
you must flag their account.

50
00:02:16.220 --> 00:02:18.635
Finally, if a user is

51
00:02:18.635 --> 00:02:22.549
simultaneously logged in from
two different IP addresses,

52
00:02:22.549 --> 00:02:24.500
you must flag their account.

53
00:02:24.500 --> 00:02:26.910
Python can help you
keep track of and

54
00:02:26.910 --> 00:02:29.885
analyze all of this
different login information.

55
00:02:30.885 --> 00:02:32.854
Let's consider one
final example.

56
00:02:32.854 --> 00:02:35.615
Imagine you are a
security analyst

57
00:02:35.615 --> 00:02:37.985
working at a large organization.

58
00:02:37.985 --> 00:02:40.265
Recently, this organization

59
00:02:40.265 --> 00:02:42.590
has increased security measures

60
00:02:42.590 --> 00:02:45.785
to make sure all
customer-facing applications

61
00:02:45.785 --> 00:02:47.315
are better protected.

62
00:02:47.315 --> 00:02:51.460
Since there is a password to
access these applications,

63
00:02:51.460 --> 00:02:53.000
they want to monitor

64
00:02:53.000 --> 00:02:56.930
all password login attempts
for suspicious activity.

65
00:02:56.930 --> 00:03:00.335
One sign of suspicious
activity is having

66
00:03:00.335 --> 00:03:02.585
several failed login attempts

67
00:03:02.585 --> 00:03:05.090
within a short amount of time.

68
00:03:05.090 --> 00:03:07.700
You need to flag
users if they had

69
00:03:07.700 --> 00:03:11.185
more than three login failures
in the last 30 minutes.

70
00:03:11.185 --> 00:03:14.600
One way you could do this
in Python is by parsing

71
00:03:14.600 --> 00:03:17.090
a static txt log file with

72
00:03:17.090 --> 00:03:20.800
all user login attempts
to each machine.

73
00:03:20.800 --> 00:03:25.115
Python could structure the
information in this file,

74
00:03:25.115 --> 00:03:28.265
including the
username, IP address,

75
00:03:28.265 --> 00:03:31.310
timestamp, and login status.

76
00:03:31.310 --> 00:03:33.860
It could then use
conditionals to

77
00:03:33.860 --> 00:03:37.040
determine if a user
needs to be flagged.

78
00:03:38.040 --> 00:03:39.785
These are just a
few examples of how

79
00:03:39.785 --> 00:03:41.705
a security analyst might

80
00:03:41.705 --> 00:03:44.765
apply Python in their
day-to-day work.

81
00:03:44.765 --> 00:03:47.810
I hope you are as
excited as I am

82
00:03:47.810 --> 00:03:51.300
to create solutions
for security problems.