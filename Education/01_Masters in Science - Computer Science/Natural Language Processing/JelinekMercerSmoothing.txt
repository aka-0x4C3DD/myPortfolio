from collections import defaultdict
class JelinekMercerSmoothing:
    def __init__(self, corpus, lambda_=0.7):
        self.lambda_ = lambda_
        self.unigrams = defaultdict(int)
        self.bigrams = defaultdict(int)
        self.total_unigrams = 0
        self.train(corpus)

    def train(self, corpus):
        for sentence in corpus:
            tokens = sentence.split()
            for i in range(len(tokens)):
                self.unigrams[tokens[i]] += 1
                self.total_unigrams += 1
                if i > 0:
                    self.bigrams[(tokens[i-1], tokens[i])] += 1

    def bigram_prob(self, word1, word2):
        unigram_prob = self.unigrams[word2] / self.total_unigrams
        bigram_prob = self.bigrams[(word1, word2)] / self.unigrams[word1] if self.unigrams[word1] > 0 else 0
        return self.lambda_ * bigram_prob + (1 - self.lambda_) * unigram_prob

corpus = ["the cat is black", "the dog is white", "the cat is white"]
model = JelinekMercerSmoothing(corpus, lambda_=0.7)
print(f"P(cat | the): {model.bigram_prob('the', 'cat'):.3f}")
