from collections import defaultdict
class WittenBellSmoothing:
    def __init__(self, corpus):
        self.unigrams = defaultdict(int)
        self.bigrams = defaultdict(int)
        self.total_unigrams = 0
        self.train(corpus)

    def train(self, corpus):
        for sentence in corpus:
            tokens = sentence.split()
            for i in range(len(tokens)):
                self.unigrams[tokens[i]] += 1
                self.total_unigrams += 1
                if i > 0:
                    self.bigrams[(tokens[i-1], tokens[i])] += 1

    def bigram_prob(self, word1, word2):
        V = len(set(self.unigrams.keys()))
        bigram_count = self.bigrams[(word1, word2)]
        unigram_count = self.unigrams[word1]
        return (bigram_count + 1) / (unigram_count + V) if unigram_count > 0 else 1 / V

corpus = ["the cat is black", "the dog is white", "the cat is white"]
model = WittenBellSmoothing(corpus)
print(f"P(cat | the): {model.bigram_prob('the', 'cat'):.3f}")
